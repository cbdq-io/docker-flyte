---
#############################################################################
# GitHub workflow file for the project.
#############################################################################
name: Pipeline

on:
  push:

  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: '15 0 * * TUE'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Allows this workflow to be called from other workflows
  workflow_call:

env:
  BUILDX_NO_DEFAULT_ATTESTATIONS: 1
  REGISTRY: ghcr.io

jobs:
  CI:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Lint
        run: make lint

      - name: Build
        run: make build

      - name: Test
        run: make test

      - name: Smoke Test - ML
        run: docker compose -f examples/wine/docker-compose.yml up

      - name: Smoke Test - Spark
        run: docker compose -f examples/spark/docker-compose.yml up

      - name: Smoke Test - Delta Spark
        run: docker run --rm -i flyte:latest python < examples/delta/delta.py

  Trivy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build
        run: make build

      - name: Scan Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "flyte:latest"
          trivy-config: trivy.yaml

  CD:
    needs:
      - CI
      - Trivy

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: docker/setup-buildx-action@v3

      - name: Set the Docker Tag to Latest
        if: github.ref == 'refs/heads/develop'
        id: get-tag-latest
        run: echo "TAG=latest" >> $GITHUB_ENV

      - name: Get the Docker Release Tag
        if: github.ref == 'refs/heads/main'
        id: get-tag-release
        run: echo "TAG=$(make tag)" >> $GITHUB_ENV

      - name: Get Flyte Kit version
        id: get-flyte-kit-version
        run: echo "FLYTE_KIT_VERSION=$(make flyte-kit-version)" >> $GITHUB_ENV

      - name: Get Python version
        id: get-python-version
        run: echo "FLYTE_PYTHON_VERSION=$(make python-version)" >> $GITHUB_ENV

      - name: Log in to the Container Registry
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Images for Multiple Architectures
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: docker/build-push-action@v6
        with:
          push: false  # Don't push the images yet, only build them
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/cbdq-io/flyte:${{ env.TAG }}
          build-args: |
            FLYTE_KIT_VERSION=${{ env.FLYTE_KIT_VERSION }}
            FLYTE_PYTHON_VERSION=${{ env.FLYTE_PYTHON_VERSION }}

      - name: Create and Annotate Multi-Arch Manifest
        run: |
          docker manifest create ghcr.io/cbdq-io/flyte:${{ env.TAG }} \
            --amend ghcr.io/cbdq-io/flyte:${{ env.TAG }}-amd64 \
            --amend ghcr.io/cbdq-io/flyte:${{ env.TAG }}-arm64
          docker manifest annotate ghcr.io/cbdq-io/flyte:${{ env.TAG }} \
            --annotation org.opencontainers.image.source="https://github.com/cbdq-io/docker-flyte" \
            --annotation org.opencontainers.image.description="A Docker Image for Flyte With Spark." \
            --annotation org.opencontainers.image.licenses="BSD-3-Clause"

      - name: Push Multi-Arch Manifest
        run: |
          docker manifest push ghcr.io/cbdq-io/flyte:${{ env.TAG }}
